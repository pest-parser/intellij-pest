//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="rs.pest.psi.PestParser"

  extends="rs.pest.psi.impl.PestElement"

  psiClassPrefix="Pest"
  psiImplClassSuffix="Impl"
  psiPackage="rs.pest.psi"
  psiImplPackage="rs.pest.psi.impl"

  elementTypeHolderClass="rs.pest.psi.PestTypes"
  elementTypeClass="rs.pest.psi.PestElementType"
  tokenTypeClass="rs.pest.psi.PestTokenType"
}

grammar_rules ::=  grammar_rule+ { recoverWhile=grammar_rules_recover }

grammar_body  ::= OPENING_BRACE expression CLOSING_BRACE {
	pin=1
	recoverWhile=grammar_body_recover
}

private grammar_body_recover ::= !rule_name

grammar_rule  ::= rule_name ASSIGNMENT_OPERATOR modifier? grammar_body {
	implements=["com.intellij.psi.PsiNameIdentifierOwner"]
	mixin="rs.pest.psi.impl.PestGrammarRuleMixin"
	pin=2
	recoverWhile=grammar_rule_recover
}

private rule_name ::=
    valid_rule_name
  | customizable_rule_name
  | fixed_builtin_rule_name

fixed_builtin_rule_name ::= commands | builtin {
	mixin="rs.pest.psi.impl.PestFixedBuiltinRuleNameMixin"
}

customizable_rule_name ::= WHITESPACE_TOKEN | COMMENT_TOKEN {
	mixin="rs.pest.psi.impl.PestCustomizableRuleNameMixin"
}

valid_rule_name ::= IDENTIFIER_TOKEN {
	mixin="rs.pest.psi.impl.PestRuleNameMixin"
}

private grammar_rule_recover ::= !(rule_name )
private grammar_rules_recover ::= !(rule_name  ASSIGNMENT_OPERATOR)

modifier ::=
	SILENT_MODIFIER |
	ATOMIC_MODIFIER |
	COMPOUND_ATOMIC_MODIFIER |
	NON_ATOMIC_MODIFIER

expression ::= term infix_part*
term       ::= prefix_operator* rule postfix_operator* { pin=1 extends=expression }
// Can't name `node`, conflict with PsiElement's class
rule       ::= paren_part | atom { extends=expression }

private paren_part ::= OPENING_PAREN expression CLOSING_PAREN { pin=1 }
private infix_part ::= infix_operator term { pin=1 }

private atom ::=
	push |
	peek |
	identifier |
	customizable_rule_name |
	string |
	range |
	builtin |
	commands

prefix_operator  ::= POSITIVE_PREDICATE_OPERATOR | NON_ATOMIC_MODIFIER
infix_operator   ::= SEQUENCE_OPERATOR | CHOICE_OPERATOR
postfix_operator ::=
	OPTIONAL_OPERATOR |
	REPEAT_OPERATOR |
	REPEAT_ONCE_OPERATOR |
	repeat_exact |
	repeat_min |
	repeat_max |
	repeat_min_max

private repeat_exact   ::= OPENING_BRACE NUMBER CLOSING_BRACE
private repeat_min     ::= OPENING_BRACE NUMBER COMMA CLOSING_BRACE
private repeat_max     ::= OPENING_BRACE COMMA NUMBER CLOSING_BRACE
private repeat_min_max ::= OPENING_BRACE NUMBER COMMA NUMBER CLOSING_BRACE

integer    ::= MINUS? NUMBER
identifier ::= IDENTIFIER_TOKEN {
	mixin="rs.pest.psi.impl.PestIdentifierMixin"
	extends=expression
}

push ::= PUSH_TOKEN OPENING_PAREN expression CLOSING_PAREN {
	extends=expression
	pin=1
	name="PUSH"
}

peek ::= PEEK_TOKEN peek_slice? {
	extends=expression
	pin=1
	name="PEEK"
}

peek_slice ::= OPENING_BRACK integer? RANGE_OPERATOR integer? CLOSING_BRACK {
	pin=1
	name="PEEK.."
}

commands   ::=
   PEEK_ALL_TOKEN
 | POP_TOKEN
 | POP_ALL_TOKEN { extends=expression }
builtin    ::=
   LETTER_TOKEN
 | CASED_LETTER_TOKEN
 | UPPERCASE_LETTER_TOKEN
 | LOWERCASE_LETTER_TOKEN
 | TITLECASE_LETTER_TOKEN
 | MODIFIER_LETTER_TOKEN
 | OTHER_LETTER_TOKEN
 | MARK_TOKEN
 | NONSPACING_MARK_TOKEN
 | SPACING_MARK_TOKEN
 | ENCLOSING_MARK_TOKEN
 | NUMBER_TOKEN
 | DECIMAL_NUMBER_TOKEN
 | LETTER_NUMBER_TOKEN
 | OTHER_NUMBER_TOKEN
 | PUNCTUATION_TOKEN
 | CONNECTOR_PUNCTUATION_TOKEN
 | DASH_PUNCTUATION_TOKEN
 | OPEN_PUNCTUATION_TOKEN
 | CLOSE_PUNCTUATION_TOKEN
 | INITIAL_PUNCTUATION_TOKEN
 | FINAL_PUNCTUATION_TOKEN
 | OTHER_PUNCTUATION_TOKEN
 | SYMBOL_TOKEN
 | MATH_SYMBOL_TOKEN
 | CURRENCY_SYMBOL_TOKEN
 | MODIFIER_SYMBOL_TOKEN
 | OTHER_SYMBOL_TOKEN
 | SEPARATOR_TOKEN
 | SPACE_SEPARATOR_TOKEN
 | LINE_SEPARATOR_TOKEN
 | PARAGRAPH_SEPARATOR_TOKEN
 | OTHER_TOKEN
 | CONTROL_TOKEN
 | FORMAT_TOKEN
 | SURROGATE_TOKEN
 | PRIVATE_USE_TOKEN
 | UNASSIGNED_TOKEN
 | ALPHABETIC_TOKEN
 | BIDI_CONTROL_TOKEN
 | CASE_IGNORABLE_TOKEN
 | CASED_TOKEN
 | CHANGES_WHEN_CASEFOLDED_TOKEN
 | CHANGES_WHEN_CASEMAPPED_TOKEN
 | CHANGES_WHEN_LOWERCASED_TOKEN
 | CHANGES_WHEN_TITLECASED_TOKEN
 | CHANGES_WHEN_UPPERCASED_TOKEN
 | DASH_TOKEN
 | DEFAULT_IGNORABLE_CODE_POINT_TOKEN
 | DEPRECATED_TOKEN
 | DIACRITIC_TOKEN
 | EXTENDER_TOKEN
 | GRAPHEME_BASE_TOKEN
 | GRAPHEME_EXTEND_TOKEN
 | GRAPHEME_LINK_TOKEN
 | HEX_DIGIT_TOKEN
 | HYPHEN_TOKEN
 | IDS_BINARY_OPERATOR_TOKEN
 | IDS_TRINARY_OPERATOR_TOKEN
 | ID_CONTINUE_TOKEN
 | ID_START_TOKEN
 | IDEOGRAPHIC_TOKEN
 | JOIN_CONTROL_TOKEN
 | LOGICAL_ORDER_EXCEPTION_TOKEN
 | LOWERCASE_TOKEN
 | MATH_TOKEN
 | NONCHARACTER_CODE_POINT_TOKEN
 | OTHER_ALPHABETIC_TOKEN
 | OTHER_DEFAULT_IGNORABLE_CODE_POINT_TOKEN
 | OTHER_GRAPHEME_EXTEND_TOKEN
 | OTHER_ID_CONTINUE_TOKEN
 | OTHER_ID_START_TOKEN
 | OTHER_LOWERCASE_TOKEN
 | OTHER_MATH_TOKEN
 | OTHER_UPPERCASE_TOKEN
 | PATTERN_SYNTAX_TOKEN
 | PATTERN_WHITE_SPACE_TOKEN
 | PREPENDED_CONCATENATION_MARK_TOKEN
 | QUOTATION_MARK_TOKEN
 | RADICAL_TOKEN
 | REGIONAL_INDICATOR_TOKEN
 | SENTENCE_TERMINAL_TOKEN
 | SOFT_DOTTED_TOKEN
 | TERMINAL_PUNCTUATION_TOKEN
 | UNIFIED_IDEOGRAPH_TOKEN
 | UPPERCASE_TOKEN
 | VARIATION_SELECTOR_TOKEN
 | WHITE_SPACE_TOKEN
 | XID_CONTINUE_TOKEN
 | XID_START_TOKEN
 | PUSH_TOKEN
 | PEEK_TOKEN
 | PEEK_ALL_TOKEN
 | POP_TOKEN
 | POP_ALL_TOKEN
 | ANY_TOKEN
 | EOI_TOKEN
 | SOI_TOKEN
 | DROP_TOKEN
 | ASCII_TOKEN
 | NEWLINE_TOKEN
 | ASCII_DIGIT_TOKEN
 | ASCII_ALPHA_TOKEN
 | ASCII_ALPHANUMERIC_TOKEN
 | ASCII_NONZERO_DIGIT_TOKEN
 | ASCII_BIN_DIGIT_TOKEN
 | ASCII_OCT_DIGIT_TOKEN
 | ASCII_HEX_DIGIT_TOKEN
 | ASCII_ALPHA_UPPER_TOKEN
 | ASCII_ALPHA_LOWER_TOKEN {
	extends=expression
	mixin="rs.pest.psi.impl.PestBuiltinMixin"
}

character ::= CHAR_TOKEN { extends=expression }
string    ::= INSENSITIVE_OPERATOR? STRING_TOKEN {
	extends=expression
	implements=["com.intellij.psi.PsiLanguageInjectionHost"]
	mixin="rs.pest.psi.impl.PestStringMixin"
}

range     ::= character RANGE_OPERATOR character {
	name=".."
	extends=expression
	pin=2
}

